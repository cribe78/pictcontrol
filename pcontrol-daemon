#!/usr/bin/perl

# pcontrol-daemon
# Control program for Extron DXP HDMI switcher
# Reads commands from a database and executes them.  Keeps database updated with
# status of switcher

use DBI;
use English;
use Getopt::Long;
use IO::Socket::INET;
use POSIX;
use Scalar::Util qw( looks_like_number );
use Sys::Syslog;
use Time::HiRes qw( usleep time );
use feature 'state';
use warnings;
use strict;

$|++;

my $device_ip = "10.5.162.202";
my $device_port = "23";
my $device_pass = "DWCONTROL";
my $target_type = "switcher-dxp";
my $target_num = 1;
my $debug = 1;
my $poll_server = 1;
my $target_poll_freq = 20; # how often to poll the switcher status, in s
my $listen_port = 0;
my $daemon = 1;

GetOptions("address=s" => \$device_ip,
            "port=i" => \$device_port,
            "password=s" => \$device_pass,
            "tt=s" => \$target_type,
            "tn=i" => \$target_num,
            "debug=i" => \$debug,
            "listen_port=i" => \$listen_port,
            "daemon!" => \$daemon);


if ($daemon) {        
    # Daemonize
    # Get ready to daemonize by redirecting our output to syslog,
    # requesting that logger prefix the lines with our program name:
    my $ProgramName = "pcontrol-daemon";
    open(STDOUT, "|-", "logger -p local2.info -t $ProgramName")
        or die("Couldn't open logger output stream: $!\n");
    open(STDERR, ">&STDOUT") or die("Couldn't redirect STDERR to STDOUT: $!\n");


    chdir('/'); # Avoid the possibility of our working directory resulting in keeping an otherwise unused filesystem in use

    # Double-fork to avoid leaving a zombie process behind:
    my $pid;
    defined($pid = fork()) or die "can't fork: $!";

    if ($pid) {
        exit;
    }

    defined($pid = fork()) or die "can't fork: $!";
    if ($pid) {
        exit;
    };

    print "$ProgramName $$ successfully daemonized\n";
    openlog("pcontrol-daemon","pid","local2");

}

# Print a log message before exiting on SIGTERM
$SIG{TERM} = sub {
    dwlog("received SIGTERM.  exiting");
    exit();
};



my $dbh;
db_connect();

dwlog("ip=$device_ip port=$device_port");
# Use this to build the listen_port number
# from the target type
my %default_ports = ( proj => 28800,
                      scaler => 28810,
                      "switcher-dxp" => 28820,
                      "audio-onkyo" => 28830,
                      "proj-benq" => 28840,
                      "audio-onkyo-eth" => 28850);

if (! $listen_port) {
    $listen_port = $default_ports{$target_type} + $target_num;
}

my $proto = "";

if ($target_type eq "switcher-dxp") {
    $proto = "dxp";
}
elsif ($target_type eq "audio-onkyo") {
    $proto = "iscp";
}
elsif ($target_type eq "audio-onkyo-eth") {
    $proto = "eiscp";
}
elsif ($target_type eq "proj") {
    $proto = "f32";
}
elsif ($target_type eq "scaler") {
    $proto = "ia200";
}
elsif ($target_type eq "proj-benq") {
    $proto = "benq";
}

if (! $proto) {
    dwlog("no protocol defined for target_type $target_type, exiting");
    exit();
}


# Connect to the switcher
my $sock = device_connect();
if (! $sock) {
    dwlog("could not connect to device, exiting");
    exit();
}

# Create a UDP server to listen for notifications
my $poll_sock = server_start();

run();

# cleanup_commands
# delete old records from the command queue have that have been obsoleted
# by newer executions of the same command

sub cleanup_commands {
    my ($cmd_ref) = (@_);
    my %command = %$cmd_ref;

    state $delete_commands = $dbh->prepare(
        "delete from command_queue
            where target_type = ?
            and target_num = ?
            and command_name = ?
            and poll <> 1
            and cq_id <> ?
            and (status = 'EXECUTED' || status = 'ERROR')");

    if (! $delete_commands) {
        dwlog("error preparing delete_commands: $DBI::errstr");
    }

    #dwdebug("delete_commands: $target_type, $target_num, " .
    #        "$command{command_name}, $command{cq_id}");
    my $rows = $delete_commands->execute($target_type, $target_num,
                                $command{command_name}, $command{cq_id});
    if (! $rows) {
        dwlog("error executing delete_commands: $DBI::errstr");
    }
    else {
        $rows = $delete_commands->rows();
        dwdebug("cleanup_commands: $rows rows deleted");
    }
}

sub db_connect {
    $dbh = 0;
    $dbh = DBI->connect("dbi:mysql:pictcontrol:127.0.0.1:3306","pict","DWCONTROL");


    my $insert_daemon = $dbh->prepare(
        "insert into command_daemons (target_type, target_num, port, pid)
            values (?, ?, ?, ?)
            on duplicate key update port = VALUES(port), pid = VALUES(pid)");

    if (! $insert_daemon) {
        dwlog("error preparing insert_daemon: $DBI::errstr");
    }

    $insert_daemon->execute($target_type, $target_num, 0, $PID);
    dwdebug("db, connected. daemon registered with DB (port 0)");
}

sub device_connect {
    my $sock = IO::Socket::INET->new(
                PeerAddr => $device_ip,
                PeerPort => $device_port,
                Proto => 'tcp',
                Blocking => 0,
                Timeout => 5);
    if (! $sock) {
        dwlog("could not open socket to device");
        return 0;
    }

    dwlog("connected to $device_ip:$device_port, proto $proto");
    poll_usleep(2000000);

    if ($proto ne "dxp") {
        return $sock;
    }


    # The extron prints a connection message before the password prompt
    my $msg = telnet_read($sock);
    if (! $msg) {
    #    dwlog("no response from switcher");
    #    $sock->close();
    #    return 0;
    }
    dwdebug("line read: $msg");

    $msg = telnet_read($sock);
    if (! $msg) {
        dwlog("no response from device");
        $sock->close();
        return 0;
    }

    if ($msg !~ /Extron Electronics/) {
        dwlog("unexpected welcome message: $msg");
        $sock->close();
        return 0;
    }
    dwdebug("line read: $msg");

    # One of these lines is the date, the other a blank line
    $msg = telnet_read($sock);
    dwdebug("line read: $msg");

    $msg = telnet_read($sock);
    dwdebug("line read: $msg");

    # The password prompt should follow
    $msg = telnet_read($sock);
    if ($msg ne "Password:") {
        dwlog("expected password prompt: $msg");
        $sock->close();
        return 0;
    }
    else {
        dwdebug("password prompt read");
    }


    $sock->print("$device_pass\r\n");
    $msg = telnet_read($sock);
    dwdebug("line read: $msg");


    $msg = telnet_read($sock);
    if ($msg =~ /Login Administrator/) {
        dwlog("successfully logged into switcher");
        return $sock;
    }
    else {
        dwlog("switcher login failed! $msg");
        $sock->close();
        return 0;
    }
}


sub dwdebug {
    my ($msg) = (@_);
    if ($debug) {
        dwlog($msg);
    }
}


# Send log messages to the database and syslog

sub dwlog {
    my ($msg) = (@_);
    chomp $msg;

    if ($daemon) {
        syslog("info", "$target_type:$target_num $msg");
    }
    else {
        print "$msg\n";
    }
}


sub execute_command {
    my $res = 0;
    state $last_success = time();
    my $alert_thresh = $target_poll_freq * 2;

    if ($proto eq "dxp") {
        $res = execute_command_dxp(@_);
    }
    elsif ($proto eq "iscp") {
        $res = execute_command_iscp(@_);
    }
    elsif ($proto eq "eiscp") {
        $res = execute_command_eiscp(@_);
    }
    elsif ($proto eq "f32") {
        $res =  execute_command_f32(@_);
    }
    elsif ($proto eq "ia200") {
        $res = execute_command_ia200(@_);
    }
    elsif ($proto eq "benq") {
        $res = execute_command_benq(@_);
    }
    else {
        dwlog("command protocol not implemented: $proto");
        return 0;
    }

    if ($res == 1) {
        $last_success = time();
    }
    elsif (time() - $last_success > $alert_thresh) {
        # It has been more than alert_thresh seconds since
        # we last successfully communicated with the device.
        # Close the connection and reconnect.

        my $elapsed = time() - $last_success;
        dwlog("{$elapsed}s since last device communication.  resetting...");
        $sock->close();
        $sock = device_connect();
    }


    return $res;
}

sub execute_command_benq {
    my ($cmd_ref) = (@_);
    my %command = %$cmd_ref;

    my $val = '';
    if ($command{command_type} eq "boolean") {
        if ($command{value}) {
            $val = "ON";
        }
        else {
            $val = "OFF";
        }
    }
    elsif ($command{command_type} eq "query") {
        $val = "?";
    }
    else {
        $val = $command{value};
    }

    my $cmd_name = $command{command_name};
    my $command_core = "*" . $cmd_name . "=" . $val . "#";
    my $command_str = "\r" . $command_core . "\r";
    my $cmd_echo = ">$command_core";

    $sock->print($command_str);
    dwdebug("command_sent: $command_str");
    poll_usleep(80000);

    my $resp = telnet_read($sock);

    # Device will echo command and then send the command result for a query
    if ( $command{command_type} eq "query") {
        if ($resp ne $cmd_echo) {
            dwdebug("unexpected response read: $resp");
        }

        $resp = telnet_read($sock);
    }

    if ($resp =~ /$cmd_name=(.*)#/) {
        dwdebug("cmd echoed, resp: $resp");

        if ($command{command_type} eq "query") {
            my $val = $1;
            if ($val eq "OFF") {
                $val = 0;
            }

            if ($val eq "ON") {
                $val = 1;
            }

            update_command_value($command{cq_id}, $val);
        }

        return 1;
    }
}

sub execute_command_dxp {
    my ($cmd_ref) = (@_);
    my %command = %$cmd_ref;

    # Build Command
    if ($command{command_name} =~ /^Out(\d)(Vid|Aud)/) {
        my $output = $1;
        my $av = $2;

        my $avchar = "%";
        if ($av eq "Aud") {
            $avchar = '$';
        }

        my $valpart = "$command{value}*";
        if ($command{command_type} eq "query") {
            $valpart = "";
        }

        my $command_str = $valpart . $output . $avchar . "\r\n";
        my $expected_resp = "Out$output In$command{value} $av";

        $sock->print($command_str);
        dwdebug("command_sent: $command_str");

        while (my $resp = telnet_read($sock)) {
            dwdebug("resp read: $resp");
            if ($command{command_type} eq "query" &&
                    $resp =~ /^\d$/) {
                update_command_value($command{cq_id}, $resp);
                return 1;
            }

            if ($resp eq $expected_resp) {
                return 1;
            }

            if ($resp =~ /^E\d\d\$/) {
                dwlog("execute_command error code returned: $resp");
                return 0;
            }

            else {
                dwdebug("unexpected response: $expected_resp:$resp");
                handle_unexpected_response($resp);
            }
        }

        return 0;
    }

    dwlog("execute_command: $command{command_name} not supported");
    return 0;
}


sub execute_command_f32 {
    my ($cmd_ref) = (@_);
    my %command = %$cmd_ref;
    state $last_cmd = "";

    my $cmd_name = $command{command_name};
    my $prev = $last_cmd;
    $last_cmd = $cmd_name;

    my $val = $command{value};

    if ($command{command_type} eq "query") {
        $val = "?";
    }

    my $cmd_str = ":$cmd_name$val";
    my $starttime = time();

    $sock->print("$cmd_str\r\n");
    dwdebug("command sent: $cmd_str");
    poll_usleep(80000);

    # These things can take awhile to respond
    my $max_wait = 5000000; # 5s
    my $resp = telnet_read($sock);
    my $elapsed = 1000000 * (time() - $starttime);

    while (length($resp) == 0 && $elapsed < $max_wait) {
        poll_usleep(20000);
        $resp = telnet_read($sock);
        $elapsed = 1000000 * (time() - $starttime);
    }

    if (length($resp) == 0) {
        dwlog("waited 5s, couldn't get nothin'");
        return 0;
    }

    $elapsed = sprintf("%1.3f", $elapsed / 1000000);
    dwdebug("response read ($elapsed): $resp");

    if ($resp =~ /(%001.*)/) {
        $resp = $1;
    }

    if (length($resp) < 16) {
        dwlog("unexpected f32 reponse: $resp");
        return 0;
    }

    # Sometime we will get multiple responses, including ones from
    # previous commands
    my $rcmd = substr($resp, 5, 4);
    while ($rcmd ne $cmd_name) {
        dwlog("unexpected f32 response cmd: $rcmd");

        if ($rcmd eq $prev) {
            # ARRGH, help me out of here!
            dwlog("help, it's happening again!");
        }

        #$sock->print("\r\n");
        usleep(100000);
        $resp = telnet_read($sock);

        if (! length($resp)) {
            dwlog("no f32 response");
            return 0;
        }

        dwlog("response read: $resp");
        if (length($resp) > 10) {
            $rcmd = substr($resp, 5, 4);
        }
    }


    my $rval = substr($resp, 10, 6);

    if ($rval eq "!00001") {
        dwlog("f32 command resp: access denied");
        return 0;
    }
    elsif ($rval eq "!00002") {
        $resp = telnet_read($sock);
        dwlog("f32 command resp: cmd not available $resp");
        return 0;
    }
    elsif ($rval eq "!00003") {
        $resp = telnet_read($sock);
        dwlog("f32 command resp: cmd not implemented $resp");
        return 0;
    }
    elsif ($rval eq "!00004") {
        $resp = telnet_read($sock);
        dwlog("f32 command resp: value out of range");
        return 0;
    }

    if ($rval eq "e00001") {
        if (length($resp) < 18) {
            dwlog("no extended info available");
            return 0;
        }

        $val = substr($resp, 17);
    }
    else {
        $val = sprintf("%d", $rval);
    }


    if ($command{command_type} eq "query") {
        update_command_value($command{cq_id}, $val);
        return 1;
    }

    if ($val eq $command{value}) {
        dwdebug("resp matches expected value");
        return 1;
    }

    return 0;
}


sub execute_command_ia200 {
    my ($cmd_ref) = (@_);
    my %command = %$cmd_ref;

    state $recurse_count = 0;
    $recurse_count++;
    if ($recurse_count > 2) {
        dwlog("recursion limit exceeded: $command{'command_name'}");
        return 0;
    }

    my $cmd_name = $command{command_name};
    my $val = $command{value};

    my $cmd_str = "A00";
    my $writeonly = 0;

    if ($command{command_type} eq "query") {
        $cmd_str .= "R" . $cmd_name;
    }
    elsif (! looks_like_number($val)) {
        $cmd_str .= "W" . $cmd_name . $val;
        $writeonly = 1;
    }
    else {
       $cmd_str .= sprintf("W$cmd_name%04d", $val);
    }

    my $starttime = time();
    $sock->print("$cmd_str\n");
    dwlog("command sent: $cmd_str");

    # Give it a bit to come up with an answer
    my $max_wait = 2000000; # 2s
    my $resp = telnet_read($sock);
    my $elapsed = 1000000 * (time() - $starttime);

    while (length($resp) == 0 && $elapsed < $max_wait) {
        poll_usleep(20000);
        $resp = telnet_read($sock);
        $elapsed = 1000000 * (time() - $starttime);
    }

    if (length($resp) == 0) {
        dwlog("waited 2s, couldn't get nothin'");
        $recurse_count = 0;
        return 0;
    }

    dwlog("response: $resp");

    $val = "";
    my $fc = substr($resp, 0, 1);
    #dwdebug("fc: $fc");

    if ($fc eq "V") {
        if (length($resp) < 5) {
            dwlog("short numeric response: $resp");
            return 0;
        }

        $val = substr($resp, 1, 4);
        $val =~ s/^0{1,3}//;
        dwlog("processed val: $val");

    }
    elsif ($fc eq "v") {
        $val = substr($resp, 1);
    }
    elsif ($fc eq "E") {
        dwlog("command error");
        $recurse_count = 0;
        return 0;
    }
    elsif ($fc eq "K") {
        # Set value commands will respond with "K" even if the
        # value was not set as requested
        # Send a follow up query command

        if (! $writeonly) {
            $command{command_type} = "query";
            my $ret =  execute_command_ia200(\%command);
            $recurse_count = 0;
            return $ret;
        }
    }
    else {
        dwlog("invalid response");
        return 0;
    }

    #dwdebug("val: $val");
    if ($val ne "") {
        update_command_value($command{cq_id}, $val);
    }

    $recurse_count = 0;
    return 1;
}


# iscp over ethernet.  same protocol, but with a packet size header added

sub execute_command_eiscp {
    execute_command_iscp(@_, 1);
}

# iscp protocol for controlling onkyo amps

sub execute_command_iscp {
    my ($cmd_ref, $eiscp_arg) = (@_);
    my %command = %$cmd_ref;

    my $eiscp = defined($eiscp_arg) && $eiscp_arg; 

    my $cmd_name = $command{command_name};
    my $val = $command{value};

    if ($command{command_type} eq "query") {
        $val = "QSTN";
    }
    elsif ( looks_like_number($val)) {
        $val = sprintf("%02X", $val);
    }

    my $cmd_str = "!1$cmd_name$val";
    my $cmd_send = "$cmd_str\n";

    if ($eiscp) {
        my $header = "ISCP" . pack("NNCCCC", 16, length($cmd_send), 1, 0, 0, 0);
        $cmd_send =  $header . $cmd_send;
    }
        
    $sock->print($cmd_send);
    dwdebug("command sent: $cmd_str");

    my $usleep_dur = $eiscp ? 500000 : 200000;  # ethernet device is slower than 9600 baud device, WTH

    poll_usleep($usleep_dur);
    my $resp = telnet_read($sock);

    if ($eiscp && length($resp) == 0) {
        # ethernet device don't play nice
        $resp = telnet_read($sock);
    }

    if ($eiscp) {
        # strip header
        if (length($resp) < 16) {
            dwlog("unexpected query reponse (length=" . length($resp) . "): $resp");

            return 0;
        }
        else {
            $resp = substr($resp, 16);
        }
    }

    dwdebug("response read: $resp");

    if ($command{command_type} eq "query") {
        if (length($resp) <= 5) {
            dwlog("unexpected query reponse (length=" . length($resp) . "): $resp");
            return 0;
        }
        elsif (substr($resp, 2, 3) ne $cmd_name) {
            dwlog("unexpected query reponse (length=" . length($resp) . "): $resp");
            return 0;
        }

        $val = hex(substr($resp, 5));
        update_command_value($command{cq_id}, $val);
        return 1;
    }

    if ($resp eq $cmd_str) {
        dwdebug("resp matches expected value");
        return 1;
    }

    return 0;
}


sub get_commands {
    state $max_id = 0;
    state $select_commands = $dbh->prepare(
        "select cq_id, command_name, value, command_type, ts,
            cmd_idx
            from command_queue
            where cmd_idx > ?
                and target_type = ?
                and target_num = ?
                and status = 'QUEUED'");

    if (! $select_commands->execute( $max_id, $target_type, $target_num)) {
        dwlog("select commands error: $DBI::errstr");
    }

    dwdebug("select commands, idx: $max_id");

    my $res = $select_commands->fetchall_hashref("cq_id");

    my $cq_id;
    foreach $cq_id (keys(%$res)) {
        my $cmd_idx = $res->{$cq_id}{cmd_idx};
        $max_id = $cmd_idx > $max_id ? $cmd_idx : $max_id;
    }

    return $res;
}


# Get a cmd_idx for updating a command_queue record.
# We don't really care about precisely synchronizing this between processes.

sub get_cmd_idx {
    state $add_idx = $dbh->prepare(
        "insert into cmd_idxs () values ()");

    if (! $add_idx->execute()) {
        dwlog("insert cmd_idx error: $DBI::errstr");
        return 0;
    }

    return $add_idx->{mysql_insertid};
}


sub get_poll_commands {
    state $select_commands = $dbh->prepare(
        "select cq_id, command_name, value, command_type
            from command_queue
            where target_type = ?
                and target_num = ?
                and poll = 1");

    if (! $select_commands) {
        dwlog("prepare select_commands error: $DBI::errstr");
        exit(-1);
    }

    if (! $select_commands->execute($target_type, $target_num)) {
        dwlog("select poll commands error: $DBI::errstr");
        return 0;
    }

    my $res = $select_commands->fetchall_hashref("cq_id");

    return $res;
}


# Handle a reponse other than an error or the expected reponse

sub handle_unexpected_response {
    my ($resp) = (@_);

    if ($proto eq "dxp") {
        if ($resp =~ /Out(\d+) In(\d+) (Aud|Vid|All)/) {
            my $out = $1;
            my $in = $2;
            my $av = $3;


            if ($av eq 'All') {
                insert_new_executed("Out$1Aud", $2);
                insert_new_executed("Out$1Vid", $2);
            }
            else {
                insert_new_executed("Out$1$av", $2);
            }

            dwlog("unexpected command processed: $resp");
        }
        else {
            dwlog("unhandled unexpected response ($proto): $resp");
        }
    }
    elsif ($proto eq "eiscp") {
        if (length($resp) > 16) {
            parse_iscp(substr($resp, 16));
        }
    }
    else {
        dwlog("unhandled unexpected response ($proto): $resp");
    }
}


sub insert_new_executed {
    my ($command_name, $value) = (@_);

    my $insert_command = $dbh->prepare(
        "insert into command_queue (target_type, taget_num,
            command_name, value, status)
            values (?,?,?,?,?)");

    if (! $insert_command) {
        dwlog("error preparing insert_command: $DBI::errstr");
    }

    if (! $insert_command->execute($target_type, $target_num, $command_name,
                                    $value, 'EXECUTED')) {
        dwlog("error inserting command: $DBI::errstr");
    }
}


#
# parse an iscp response
#

sub parse_iscp {
    my ($resp) = (@_);

    my $command_code = substr($resp, 2, 3);
    my $command_val = substr($resp, 5);

    dwdebug("parse iscp: $command_code : $command_val");
}


# poll_usleep
# if we need to sleep while waiting for input, make sure we
# are polling the udp server!

sub poll_usleep {
    my ($usecs) = (@_);

    my $starttime = time();
    my $elapsed_usecs = 0;

    while ($usecs > $elapsed_usecs) {
        if (server_poll()) {
            $poll_server = 1;
        }
        $elapsed_usecs = 1000000 * (time() - $starttime);
    }

    #dwdebug("elapsed_usecs = $elapsed_usecs");
}



# Main execution loop
sub run {
    my $poll_target_last = 0;


    MAIN_LOOP: while (1) {
        my $cmd_ref;
        my %commands;
        my $id;

        if ( $poll_server || server_poll()) {
            $poll_server = 0;
            dwdebug("fetch commands loop");
            $cmd_ref = get_commands();
            %commands = %$cmd_ref;

            foreach $id (sort(keys(%commands))) {
                my $res = execute_command($commands{$id});
                my $status = $res ? "EXECUTED" : "ERROR";
                update_command_status($id, $status);

                if ($status eq "EXECUTED") {
                    cleanup_commands($commands{$id});
                }
            }

            dwlog("commands processed");

            set_max_idx();

            if (server_poll()) {
                $poll_server = 1;
            }
            if ($poll_server) {
                next MAIN_LOOP;
            }
        }

        while (my $resp = telnet_read($sock)) {
            handle_unexpected_response($resp);
        }

        if (time() - $poll_target_last > $target_poll_freq) {
            dwlog("poll device");
            $cmd_ref = get_poll_commands();
            %commands = %$cmd_ref;


            foreach $id (keys(%commands)) {
                my $res = execute_command($commands{$id});
                my $status = $res ? "EXECUTED" : "ERROR";
                update_command_status($id, $status);

                if ($status eq "EXECUTED") {
                    cleanup_commands($commands{$id});
                    $poll_target_last = time();
                }

                # Break out of this if there are more client
                # commands to process
                if (server_poll()) {
                    dwdebug("breaking poll command loop");
                    $poll_server = 1;
                    next MAIN_LOOP;
                }

                set_max_idx();
            }

            $poll_target_last = time();
        }
    }
}



sub server_poll {
    my $ret_val = 0;
    my $data = "";

    if (! defined($poll_sock)) {
        return 0;
    }


    # We will not do anything with the data received on
    # this port, it is only used to indicate that we
    # need to poll the database

    while (my $addr = $poll_sock->recv($data, 4)) {
        $ret_val = 1;
        my $ack = "ACK";
        #dwdebug("$data received");

        if ($data eq "ALV?") {
            $ret_val = 0;
        }

        $poll_sock->send($ack);
        #dwdebug("ack sent");
    }

    return $ret_val;
}




# Create a UDP server for listening for event notifications.
# We will use the receipt of a packet as a trigger to poll
# the database for changes

sub server_start {
    # Since we need to agree on a port number with the PHP application,
    # we should probably ask that applicaiton which port to use

    my $server_sock = IO::Socket::INET->new(
                            LocalPort => $listen_port,
                            Proto => "udp",
                            Blocking => 0);

    if (! $server_sock) {
        dwlog("failed to start UDP server on port $listen_port: $!");
        exit(-1);
    }

    my $insert_daemon = $dbh->prepare(
        "insert into command_daemons (target_type, target_num, port, pid)
            values (?, ?, ?, ?)
            on duplicate key update port = VALUES(port), pid = VALUES(pid)");

    if (! $insert_daemon) {
        dwlog("error preparing insert_daemon: $DBI::errstr");
    }

    $insert_daemon->execute($target_type, $target_num, $listen_port, $PID);
    dwdebug("daemon registered with DB");

    return $server_sock;
}



sub set_max_idx {
    state $update_max_idx = $dbh->prepare(
        "update cmd_idx_max set cmd_idx_max = ?
            where ? > cmd_idx_max");

    my $idx = get_cmd_idx();

    if (! $update_max_idx->execute($idx, $idx)) {
        dwlog("update max idx error: $DBI::errstr");
    }
}


# Read a line from a non-blocking telnet connection.

sub telnet_read {
    my ($sock) = (@_);

    my $buf;
    my $res = "";
    my $wait_us = 10000;
    if ($proto eq "f32") {
        $wait_us = 40000;
    }

    my $char_missed = 0;

    while (1) {
        if ($sock->read($buf, 1)) {
            if ($buf eq "\r") {
                $sock->read($buf, 1);
                return $res;
            }
            elsif ($buf eq "\x1A") {
                dwdebug("0x1A read after " . length($res) . " bytes");
                return $res;
            }
            elsif (length($res) == 0 && $buf eq "\x0A" ) {
                $buf = "";
            }

            $res .= $buf;
            $char_missed = 0;
        }
        else {
            if ($char_missed) {
                chomp $res;
                return $res;
            }
            else {
                $char_missed = 1;
                usleep($wait_us);
            }
        }
    }
}

sub update_command_value {
    my ($cq_id, $value) = (@_);

    state $update_command = $dbh->prepare(
        "update command_queue set value = ?, cmd_idx = ?  where cq_id = ?");

    my $idx = get_cmd_idx();
    if (! $update_command->execute($value, $idx, $cq_id)) {
        dwlog("update command value failed: $DBI::errstr");
        return 0;
    }

    dwdebug("command value updated: $cq_id:$value");
    return 1;
}


sub update_command_status {
    my ($cq_id, $status) = (@_);

    state $update_command = $dbh->prepare(
        "update command_queue set status = ?, cmd_idx = ? where cq_id = ?");

    my $idx = get_cmd_idx();
    if (! $update_command->execute($status, $idx, $cq_id)) {
        dwlog("update command status failed: $DBI::errstr");
        return 0;
    }

    return 1;
}





